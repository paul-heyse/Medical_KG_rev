openapi: 3.1.0
info:
  title: Medical KG Multi-Protocol Gateway
  version: 0.1.0
paths:
  /health:
    get:
      summary: Liveness check
      responses:
        '200':
          description: Service is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  version:
                    type: string
                  uptime_seconds:
                    type: number
                  timestamp:
                    type: string
  /ready:
    get:
      summary: Readiness check
      responses:
        '200':
          description: Dependency health summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  version:
                    type: string
                  uptime_seconds:
                    type: number
                  checks:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                        detail:
                          type: string
  /v1/ingest/{dataset}:
    post:
      summary: Submit ingestion jobs for a dataset
      parameters:
        - name: dataset
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestionRequest'
      responses:
        '207':
          description: Batch status response
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/BatchOperationResponse'
  /v1/chunk:
    post:
      summary: Chunk a document using MinerU semantics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChunkRequest'
      responses:
        '200':
          description: Document chunks
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentChunk'
                  meta:
                    $ref: '#/components/schemas/Meta'
  /v1/embed:
    post:
      summary: Generate dense embeddings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbedRequest'
      responses:
        '200':
          description: Embedding vectors
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EmbeddingResponse'
                  meta:
                    $ref: '#/components/schemas/Meta'
  /v1/namespaces:
    get:
      summary: List available embedding namespaces
      responses:
        '200':
          description: Namespace catalog
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/NamespaceInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
  /v1/namespaces/{namespace}/validate:
    post:
      summary: Validate texts against namespace token limits
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamespaceValidationRequest'
      responses:
        '200':
          description: Validation result
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NamespaceValidationResponse'
                  meta:
                    $ref: '#/components/schemas/Meta'
  /v1/retrieve:
    post:
      summary: Retrieve documents from the knowledge graph
      parameters:
        - name: $filter
          in: query
          schema:
            type: string
        - name: $select
          in: query
          schema:
            type: string
        - name: $expand
          in: query
          schema:
            type: string
        - name: $top
          in: query
          schema:
            type: integer
        - name: $skip
          in: query
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetrieveRequest'
      responses:
        '200':
          description: Retrieval results
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RetrievalResult'
                  meta:
                    $ref: '#/components/schemas/Meta'
  /v1/search:
    get:
      summary: Retrieve documents with GET semantics
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: top_k
          in: query
          schema:
            type: integer
        - name: rerank
          in: query
          schema:
            type: boolean
        - name: $select
          in: query
          schema:
            type: string
        - name: $expand
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Retrieval results
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RetrievalResult'
                  meta:
                    $ref: '#/components/schemas/Meta'
  /v1/map/el:
    post:
      summary: Entity linking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityLinkRequest'
      responses:
        '207':
          description: Entity link results
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EntityLinkResult'
                  meta:
                    $ref: '#/components/schemas/Meta'
  /v1/extract/{kind}:
    post:
      summary: Extract structured information from a document
      parameters:
        - name: kind
          in: path
          required: true
          schema:
            type: string
            enum: [pico, effects, ae, dose, eligibility]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtractionRequest'
      responses:
        '200':
          description: Extraction payload
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ExtractionResult'
                  meta:
                    $ref: '#/components/schemas/Meta'
  /v1/kg/write:
    post:
      summary: Persist nodes and edges into the knowledge graph
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeGraphWriteRequest'
      responses:
        '200':
          description: Write summary
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/KnowledgeGraphWriteResult'
                  meta:
                    $ref: '#/components/schemas/Meta'
  /v1/jobs/{job_id}/events:
    get:
      summary: Subscribe to job events via SSE
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
        - name: X-API-Key
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Stream of job events
          content:
            text/event-stream:
              schema:
                type: string
components:
  schemas:
    Meta:
      type: object
      additionalProperties: true
    IngestionRequest:
      type: object
      required: [tenant_id, items]
      properties:
        tenant_id:
          type: string
        items:
          type: array
          items:
            type: object
            additionalProperties: true
        priority:
          type: string
          enum: [low, normal, high]
        metadata:
          type: object
          additionalProperties: true
    BatchOperationResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/OperationStatus'
        meta:
          $ref: '#/components/schemas/Meta'
    OperationStatus:
      type: object
      properties:
        job_id:
          type: string
        status:
          type: string
        submitted_at:
          type: string
          format: date-time
        message:
          type: string
        metadata:
          type: object
          additionalProperties: true
        http_status:
          type: integer
        error:
          $ref: '#/components/schemas/BatchError'
    BatchError:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true
    ChunkRequest:
      type: object
      required: [tenant_id, document_id]
      properties:
        tenant_id:
          type: string
        document_id:
          type: string
        strategy:
          type: string
        chunk_size:
          type: integer
        overlap:
          type: number
        options:
          type: object
          additionalProperties: true
    DocumentChunk:
      type: object
      properties:
        document_id:
          type: string
        chunk_index:
          type: integer
        content:
          type: string
        metadata:
          type: object
          additionalProperties: true
        token_count:
          type: integer
    EmbedRequest:
      type: object
      required: [tenant_id, texts, namespace]
      properties:
        tenant_id:
          type: string
        texts:
          type: array
          items:
            type: string
        namespace:
          type: string
        options:
          $ref: '#/components/schemas/EmbeddingOptions'
    EmbeddingOptions:
      type: object
      properties:
        normalize:
          type: boolean
          default: true
        model:
          type: string
          nullable: true
    EmbeddingVector:
      type: object
      properties:
        id:
          type: string
        model:
          type: string
        namespace:
          type: string
        kind:
          type: string
        dimension:
          type: integer
          nullable: true
        vector:
          type: array
          nullable: true
          items:
            type: number
        terms:
          type: object
          nullable: true
          additionalProperties:
            type: number
        metadata:
          type: object
    EmbeddingMetadata:
      type: object
      properties:
        provider:
          type: string
        dimension:
          type: integer
          nullable: true
        duration_ms:
          type: number
          nullable: true
        model:
          type: string
          nullable: true
    EmbeddingResponse:
      type: object
      properties:
        namespace:
          type: string
        embeddings:
          type: array
          items:
            $ref: '#/components/schemas/EmbeddingVector'
        metadata:
          $ref: '#/components/schemas/EmbeddingMetadata'
    NamespaceInfo:
      type: object
      properties:
        id:
          type: string
        provider:
          type: string
        kind:
          type: string
        dimension:
          type: integer
          nullable: true
        max_tokens:
          type: integer
          nullable: true
        enabled:
          type: boolean
        allowed_tenants:
          type: array
          items:
            type: string
        allowed_scopes:
          type: array
          items:
            type: string
    NamespaceValidationRequest:
      type: object
      required: [tenant_id, texts]
      properties:
        tenant_id:
          type: string
        texts:
          type: array
          items:
            type: string
    NamespaceValidationResult:
      type: object
      properties:
        text_index:
          type: integer
        token_count:
          type: integer
        exceeds_budget:
          type: boolean
        warning:
          type: string
          nullable: true
    NamespaceValidationResponse:
      type: object
      properties:
        namespace:
          type: string
        valid:
          type: boolean
        results:
          type: array
          items:
            $ref: '#/components/schemas/NamespaceValidationResult'
          additionalProperties: true
    RetrieveRequest:
      type: object
      required: [tenant_id, query]
      properties:
        tenant_id:
          type: string
        query:
          type: string
        top_k:
          type: integer
        filters:
          type: object
          additionalProperties: true
        rerank:
          type: boolean
        rerank_top_k:
          type: integer
        rerank_overflow:
          type: boolean
    RetrievalResult:
      type: object
      properties:
        query:
          type: string
        total:
          type: integer
        documents:
          type: array
          items:
            $ref: '#/components/schemas/DocumentSummary'
        rerank_metrics:
          type: object
          additionalProperties: true
    DocumentSummary:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        score:
          type: number
        summary:
          type: string
          nullable: true
        source:
          type: string
        metadata:
          type: object
          additionalProperties: true
    EntityLinkRequest:
      type: object
      required: [tenant_id, mentions]
      properties:
        tenant_id:
          type: string
        mentions:
          type: array
          items:
            type: string
        context:
          type: string
    EntityLinkResult:
      type: object
      properties:
        mention:
          type: string
        entity_id:
          type: string
        confidence:
          type: number
        metadata:
          type: object
          additionalProperties: true
    ExtractionRequest:
      type: object
      required: [tenant_id, document_id]
      properties:
        tenant_id:
          type: string
        document_id:
          type: string
        options:
          type: object
          additionalProperties: true
    ExtractionResult:
      type: object
      properties:
        kind:
          type: string
        document_id:
          type: string
        results:
          type: array
          items:
            type: object
            additionalProperties: true
    KnowledgeGraphWriteRequest:
      type: object
      required: [tenant_id]
      properties:
        tenant_id:
          type: string
        nodes:
          type: array
          items:
            type: object
            required: [id, label, properties]
            properties:
              id:
                type: string
              label:
                type: string
              properties:
                type: object
                additionalProperties: true
        edges:
          type: array
          items:
            type: object
            required: [type, start, end]
            properties:
              type:
                type: string
              start:
                type: string
              end:
                type: string
              properties:
                type: object
                additionalProperties: true
        transactional:
          type: boolean
    KnowledgeGraphWriteResult:
      type: object
      properties:
        nodes_written:
          type: integer
        edges_written:
          type: integer
        metadata:
          type: object
          additionalProperties: true
