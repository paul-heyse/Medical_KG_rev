[project]
name = "Medical_KG_rev"
version = "0.1.0"
description = "Multi-protocol API gateway and orchestration system for biomedical knowledge integration"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Medical_KG_rev Contributors"}
]
keywords = [
    "biomedical",
    "knowledge-graph",
    "api-gateway",
    "clinical-trials",
    "medical-literature",
    "fhir",
    "openapi",
    "graphql",
    "grpc"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
]

dependencies = [
    # API Framework
    "fastapi>=0.118.0",
    "starlette>=0.48.0",
    "uvicorn[standard]>=0.37.0",
    "python-multipart>=0.0.20",

    # Data Validation & Models
    "pydantic>=2.11.10",
    "pydantic-settings>=2.11.0",
    "pint>=0.25",
    "attrs>=25.4.0",
    "jsonschema>=4.25.1",
    "pyshacl>=0.30.1",
    "rdflib>=7.2.1",
    "tiktoken>=0.6.0",
    "jsonpatch>=1.33",
    "jsonpointer>=3.0.0",
    "alembic>=1.16.5",
    "tomli>=2.2.1",

    # GraphQL
    "strawberry-graphql[fastapi]>=0.283.0",
    "graphql-core>=3.2.6",

    # gRPC & Protocol Buffers
    "grpcio>=1.75.1",
    "grpcio-tools>=1.62.3,<1.63.0",
    "grpcio-health-checking>=1.62.3,<1.63.0",
    "grpcio-status>=1.62.3,<1.63.0",
    "protobuf>=4.25.8",

    # SOAP (Legacy Support)
    "zeep>=4.3.2",

    # HTTP Client & Async
    "httpx>=0.28.1",
    "httpcore>=1.0.9",
    "aiohttp>=3.12.15",
    "frozenlist>=1.8.0",
    "propcache>=0.4.0",
    "multidict>=6.7.0,<6.8.0",
    "certifi>=2025.10.5",
    "charset-normalizer>=3.4.3",
    "idna>=3.10",
    "httptools>=0.6.4",
    "tenacity>=9.1.2",  # Retry logic
    "pluggy>=1.6.0",  # Adapter plugin framework
    "pybreaker>=1.4.1",
    "aiohappyeyeballs>=2.6.1",
    "aiolimiter>=1.2.1",
    "cloudevents>=1.12.0",
    "humanfriendly>=10.0",
    "coloredlogs>=14.0,<15.0",
    "dagster>=1.11.13",
    "dagster-pipes>=1.11.13",
    "dagster-postgres>=0.27.13",
    "openlineage-python>=1.1.0",
    "googleapis-common-protos>=1.59.1,<1.60.0",
    "typing-extensions>=4.15.0",

    # Message Broker
    "aiokafka>=0.12.0",
    "kafka-python>=2.0.2",
    "watchdog>=6.0.0",

    # Database Drivers
    "neo4j>=6.0.2",  # Graph database
    "opensearch-py>=3.0.0",  # Search engine
    "redis[hiredis]>=6.4.0",  # Cache & rate limiting
    "asyncpg>=0.30.0",  # PostgreSQL (optional for ledger)
    "sqlalchemy[asyncio]>=2.0.43,<2.1.0",

    # Object Storage
    "boto3>=1.40.45",  # S3/MinIO
    "botocore>=1.40.45",
    "jmespath>=1.0.1",
    "s3transfer>=0.14.0",
    "minio>=7.2.18",
    "urllib3>=2.5.0,<3.0.0",

    # Vector Search & Retrieval
    "faiss-cpu>=1.12.0,<1.13.0",  # Use faiss-gpu for GPU support
    "qdrant-client>=1.15.1",
    "pyserini>=0.22.0",
    "rank-bm25>=0.2.2",
    "scikit-learn>=1.7.2,<1.8.0",

    # ML / AI Libraries
    "torch>=2.8.0,<2.9",  # Deep learning framework
    "transformers>=4.38.0",  # Hugging Face models
    "sentence-transformers>=5.1.1",  # Dense embeddings & rerankers
    "huggingface-hub>=0.35.3",  # Model downloads
    "hf-xet>=1.1.10",
    "accelerate>=1.10.1",
    "orjson>=3.11.3",
    "onnxruntime>=1.23.0",  # ONNX runtime for CPU acceleration
    "safetensors>=0.6.2",
    "langchain>=0.3.27",  # Framework adapters
    "langchain-core>=0.3.78",
    "langchain-text-splitters>=0.3.11",  # Chunker profiles
    "langsmith>=0.4.33",  # LangSmith tracing client
    "annotated-types>=0.7.0",
    "deprecation>=2.1.0",
    "anyio>=4.11.0",
    "deprecated>=1.2.18",
    "llama-cloud>=0.1.43",
    "llama-cloud-services>=0.6.73",
    "llama-index>=0.12.52",  # Framework adapters
    "llama-index-agent-openai>=0.4.12",
    "llama-index-cli>=0.4.4",
    "llama-index-core>=0.12.52.post1,<0.12.53",  # Core chunking utilities
    "llama-index-embeddings-openai>=0.3.1",  # OpenAI-style embedding bridge
    "llama-index-indices-managed-llama-cloud>=0.6.11",
    "llama-index-instrumentation>=0.4.1",
    "llama-index-llms-openai>=0.4.7",
    "llama-index-multi-modal-llms-openai>=0.5.3",
    "llama-index-program-openai>=0.3.2",
    "llama-index-question-gen-openai>=0.3.1",
    "llama-index-readers-file>=0.4.11",
    "llama-index-readers-llama-parse>=0.4.0",
    "llama-index-workflows>=1.3.0",
    "llama-parse>=0.6.73",
    "beautifulsoup4>=4.14.2",
    "soupsieve>=2.8",
    "effdet>=0.4.1",
    "timm>=1.0.20",
    "omegaconf>=2.3.0",
    "matplotlib>=3.10.6",
    "contourpy>=1.3.3",
    "cycler>=0.12.1",
    "fonttools>=4.60.1",
    "kiwisolver>=1.4.9",
    "colbert-ai>=0.2.22",  # ColBERT index utilities
    "haystack-ai>=2.18.1",  # Modern Haystack adapter support
    "vllm>=0.11.0",  # OpenAI-compatible embedding server
    "openai>=1.0.0",  # Client for vLLM embeddings

    # Document Processing & Chunking
    "nest-asyncio>=1.6.0",
    "syntok>=1.4.4",
    "nltk>=3.9.2",
    "unstructured[local-inference]>=0.12.0",
    "unstructured>=0.18.15",
    "unstructured-client>=0.42.3",
    "unstructured-inference>=1.0.5",
    "unstructured.pytesseract>=0.3.15",
    "emoji>=2.15.0",
    "html5lib>=1.1",
    "langdetect>=1.0.9",
    "rapidfuzz>=3.14.1",
    "python-docx>=1.2.0",
    "python-pptx>=1.0.2",
    "python-iso639>=2025.2.18",
    "python-magic>=0.4.27",
    "python-oxmsg>=0.0.2",
    "pdf2image>=1.17.0",
    "opencv-python>=4.12.0",
    "pi-heif>=1.1.1",
    "pikepdf>=9.11.0",
    "msoffcrypto-tool>=5.4.2",
    "olefile>=0.47",
    "openpyxl>=3.1.5",
    "pypandoc>=1.15",
    "pypdfium2>=4.30.0",
    "xlrd>=2.0.2",
    "XlsxWriter>=3.2.9",
    "google-api-core>=2.25.2",
    "google-auth>=2.41.1",
    "google-cloud-vision>=3.10.2",
    "cachetools>=6.2.0",
    "proto-plus>=1.26.1",
    "pyasn1>=0.6.1",
    "pyasn1-modules>=0.4.2",
    "pycocotools>=2.0.10",
    "antlr4-python3-runtime>=4.9.3,<4.10.0",
    "lia_web>=0.2.3",

    # PDF Processing (MinerU dependencies)
    "pypdf>=5.9.0",
    "pdfplumber>=0.11.7",
    # Note: OpenCV wheels from PyPI conflict with NumPy >=2.3. Use conda-forge's
    # `py-opencv` build when GPU PDF processing (MinerU) requires OpenCV.
    "pillow>=11.3.0",
    # MinerU GPU CLI integration
    "mineru[gpu]",

    # Biomedical API Clients
    "pyalex>=0.18",  # OpenAlex
    "biopython>=1.85",  # Bio utilities

    # Data Processing
    "pandas>=2.2.3",
    "numpy>=1.26.4,<2.0.0",
    "scipy>=1.16.2,<1.17.0",
    "joblib>=1.5.2",
    "threadpoolctl>=3.6.0",
    "greenlet>=3.2.4",
    "mpmath>=1.3.0",
    "pyyaml>=6.0.3",

    # Authentication & Security
    "python-jose[cryptography]>=3.5.0",  # JWT
    "hvac>=2.3.0",  # HashiCorp Vault client
    "passlib[bcrypt]>=1.7.4",
    "cryptography>=46.0.2",
    "rsa>=4.9.1",
    "python-dotenv>=1.1.1",

    # Observability (pinned to versions compatible with Python 3.12 and Jaeger exporter availability)
    "opentelemetry-api>=1.21.0,<1.22.0",
    "opentelemetry-sdk>=1.21.0,<1.22.0",
    "opentelemetry-instrumentation>=0.42b0,<0.43",
    "opentelemetry-instrumentation-asgi>=0.42b0,<0.43",
    "opentelemetry-instrumentation-fastapi>=0.42b0,<0.43",
    "opentelemetry-instrumentation-grpc>=0.42b0,<0.43",
    "opentelemetry-instrumentation-httpx>=0.42b0,<0.43",
    "opentelemetry-util-http>=0.42b0,<0.43",
    "opentelemetry-semantic-conventions>=0.42b0,<0.43",
    "opentelemetry-exporter-jaeger>=1.21.0,<1.22.0",
    "opentelemetry-exporter-jaeger-proto-grpc>=1.21.0,<1.22.0",
    "opentelemetry-exporter-jaeger-thrift>=1.21.0,<1.22.0",
    "prometheus-client>=0.19.0",
    "psutil>=6.0.0",
    "thrift>=0.22.0",

    # Logging
    "structlog>=25.4.0",
    "sentry-sdk>=2.40.0",

    # Utilities
    "click>=8.1.7,<8.2.0",  # CLI
    "tqdm>=4.67.1",  # Progress bars
    "python-dateutil>=2.9.0.post0",
    "requests>=2.32.5",
    "distro>=1.9.0",
    "jiter>=0.11.0",
    "wrapt>=1.17.3",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "httpx>=0.28.1",  # Test client
    "faker>=22.0.0",  # Test data generation

    # Contract Testing
    "schemathesis>=3.19.0",  # OpenAPI contract tests

    # Performance Testing
    # k6 (install separately via system package manager)

    # Code Quality
    "black>=24.1.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",

    # Type Stubs
    "types-redis>=4.6.0",
    "types-pyyaml>=6.0.12",
    "types-python-dateutil>=2.8.19",
    "types-jsonschema>=4.23.0",
    "types-boto3>=1.34.0",
    "grpc-stubs>=1.53.0.6",
    "types-python-jose>=3.3.0",

    # Documentation
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",

    # Development Tools
    "ipython>=8.20.0",
    "ipykernel>=6.29.0",
    "jupyter>=1.0.0",
    "respx>=0.20.2",
]

gpu = [
    # GPU-specific dependencies
    "faiss-gpu>=1.7.4 ; platform_system != 'Windows'",  # GPU-accelerated vector search (Linux/macOS)
    "torch>=2.8.0,<2.9",  # Install with appropriate CUDA wheel via official PyTorch index if needed
]

docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
    "pdoc>=14.0.0",
]

chunking = [
    "langchain-text-splitters>=0.3.11",
    "llama-index-core",
    "haystack-ai>=2.18.1",
    "unstructured>=0.11.8",
    "hdbscan>=0.8.33",
    "networkx>=3.2.1",
    "layoutparser>=0.3.4",
    "docling>=0.0.4",
    "gensim>=4.3.0",
    "nltk>=3.8.1",
    "pysbd>=0.3.4",
    "scikit-learn>=1.7.2,<1.8.0",
    "spacy>=3.7.2",
]
reranking = [
    "xgboost>=1.7.6",
]

[project.entry-points."medical_kg.adapters"]
example = "Medical_KG_rev.adapters.plugins.example:ExampleAdapterPlugin"

[project.urls]
Homepage = "https://github.com/your-org/Medical_KG_rev"
Documentation = "https://your-org.github.io/Medical_KG_rev"
Repository = "https://github.com/your-org/Medical_KG_rev"
Issues = "https://github.com/your-org/Medical_KG_rev/issues"

[project.scripts]
medkg = "Medical_KG_rev.cli:main"
medkg-gateway = "Medical_KG_rev.gateway.main:main"
medkg-worker = "Medical_KG_rev.orchestration.workers:main"

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"Medical_KG_rev.kg" = ["*.ttl"]

[tool.black]
line-length = 100
target-version = ["py312"]
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py312"
extend-select = [
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "RUF",  # ruff-specific
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "PTH",  # flake8-use-pathlib
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
]
ignore = [
    "E501",    # Line too long (handled by black)
    "TID252",  # Allow relative imports within package
    "N999",    # Allow capitalized top-level package name
]

[tool.ruff.isort]
known-first-party = ["Medical_KG_rev"]

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pyalex.*",
    "neo4j.*",
    "opensearch.*",
    "faiss.*",
    "minio.*",
    "zeep.*",
    "aiokafka.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=Medical_KG_rev",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
asyncio_mode = "auto"
markers = [
    "integration: Integration tests requiring external services",
    "gpu: Tests requiring GPU hardware",
    "slow: Slow-running tests",
    "contract: Contract tests against API specs",
    "performance: Performance and load tests",
]

[tool.coverage.run]
source = ["src/Medical_KG_rev"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
