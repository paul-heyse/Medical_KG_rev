[project]
name = "Medical_KG_rev"
version = "0.1.0"
description = "Multi-protocol API gateway and orchestration system for biomedical knowledge integration"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Medical_KG_rev Contributors"}
]
keywords = [
    "biomedical",
    "knowledge-graph",
    "api-gateway",
    "clinical-trials",
    "medical-literature",
    "fhir",
    "openapi",
    "graphql",
    "grpc"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
]

dependencies = [
    # API Framework
    "fastapi>=0.118.0",
    "starlette>=0.48.0",
    "uvicorn[standard]>=0.37.0",
    "python-multipart>=0.0.20",

    # Data Validation & Models
    "pydantic>=2.11.10",
    "pydantic-settings>=2.11.0",
    "pint>=0.25",
    "jsonschema>=4.25.1",
    "pyshacl>=0.30.1",
    "rdflib>=7.2.1",
    "tiktoken>=0.11.0",

    # GraphQL
    "strawberry-graphql[fastapi]>=0.283.0",

    # gRPC & Protocol Buffers
    "grpcio>=1.75.1",
    "grpcio-tools>=1.62.3",
    "grpcio-health-checking>=1.62.3",
    "protobuf>=4.25.8",

    # SOAP (Legacy Support)
    "zeep>=4.3.2",

    # HTTP Client & Async
    "httpx>=0.28.1",
    "aiohttp>=3.12.15",
    "tenacity==8.2.3",  # Retry logic
    "pluggy>=1.3.0",  # Adapter plugin framework
    "pybreaker==1.0.2",
    "aiolimiter==1.1.0",
    "cloudevents==1.9.0",
    "dagster==1.5.14",
    "dagster-postgres==0.21.14",
    "openlineage-python==1.1.0",

    # Message Broker
    "aiokafka>=0.12.0",

    # Database Drivers
    "neo4j>=6.0.2",  # Graph database
    "opensearch-py>=3.0.0",  # Search engine
    "redis[hiredis]>=6.4.0",  # Cache & rate limiting
    "asyncpg>=0.30.0",  # PostgreSQL (optional for ledger)

    # Object Storage
    "boto3>=1.40.45",  # S3/MinIO
    "minio>=7.2.18",

    # Vector Search
    "faiss-cpu>=1.12.0",  # Use faiss-gpu for GPU support
    "qdrant-client>=1.15.1",

    # ML/AI Libraries
    "torch>=2.8.0,<2.9",  # Deep learning framework
    "transformers>=4.57.0",  # Hugging Face models
    "sentence-transformers>=5.1.1",  # Dense embeddings
    "huggingface-hub>=0.35.3",  # Model downloads
    "onnxruntime>=1.23.0",  # ONNX runtime for CPU acceleration
    "langchain>=0.3.27",  # Framework adapters
    "llama-index>=0.14.4",  # Framework adapters
    "colbert-ai>=0.2.22",  # ColBERT index utilities
    "haystack-ai==2.0.1",  # Modern Haystack adapter support

    # PDF Processing (MinerU dependencies)
    "pypdf>=6.1.1",
    "pdfplumber>=0.11.7",
    # Note: OpenCV wheels from PyPI conflict with NumPy >=2.3. Use conda-forge's
    # `py-opencv` build when GPU PDF processing (MinerU) requires OpenCV.
    "pillow>=11.3.0",
    # MinerU GPU CLI integration
    "mineru[gpu]>=2.5.4",

    # Biomedical API Clients
    "pyalex>=0.18",  # OpenAlex
    "biopython>=1.85",  # Bio utilities

    # Data Processing
    "pandas>=2.2.3",
    "numpy>=2.3.3",
    "pyyaml>=6.0.3",

    # Authentication & Security
    "python-jose[cryptography]>=3.5.0",  # JWT
    "hvac>=2.3.0",  # HashiCorp Vault client
    "passlib[bcrypt]>=1.7.4",
    "cryptography>=46.0.2",
    "python-dotenv>=1.1.1",

    # Observability (pinned to versions compatible with Python 3.12 and Jaeger exporter availability)
    "opentelemetry-api>=1.21.0,<1.22.0",
    "opentelemetry-sdk>=1.21.0,<1.22.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0,<0.43",
    "opentelemetry-instrumentation-grpc>=0.42b0,<0.43",
    "opentelemetry-instrumentation-httpx>=0.42b0,<0.43",
    "opentelemetry-exporter-jaeger>=1.21.0,<1.22.0",
    "prometheus-client>=0.19.0",

    # Logging
    "structlog>=25.4.0",
    "sentry-sdk>=2.40.0",

    # Utilities
    "click>=8.3.0",  # CLI
    "tqdm>=4.67.1",  # Progress bars
    "python-dateutil>=2.9.0.post0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "httpx>=0.28.1",  # Test client
    "faker>=22.0.0",  # Test data generation

    # Contract Testing
    "schemathesis>=3.19.0",  # OpenAPI contract tests

    # Performance Testing
    # k6 (install separately via system package manager)

    # Code Quality
    "black>=24.1.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",

    # Type Stubs
    "types-redis>=4.6.0",
    "types-pyyaml>=6.0.12",
    "types-python-dateutil>=2.8.19",
    "types-jsonschema>=4.23.0",
    "types-boto3>=1.34.0",
    "grpc-stubs>=1.53.0.6",
    "types-python-jose>=3.3.0",

    # Documentation
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",

    # Development Tools
    "ipython>=8.20.0",
    "ipykernel>=6.29.0",
    "jupyter>=1.0.0",
    "respx==0.20.2",
]

gpu = [
    # GPU-specific dependencies
    "faiss-gpu>=1.7.4 ; platform_system != 'Windows'",  # GPU-accelerated vector search (Linux/macOS)
    "torch>=2.8.0,<2.9",  # Install with appropriate CUDA wheel via official PyTorch index if needed
]

docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
    "pdoc>=14.0.0",
]

chunking = [
    "langchain-text-splitters>=0.0.1",
    "llama-index-core>=0.10.0",
    "haystack-ai==2.0.1",
    "unstructured>=0.11.8",
    "hdbscan>=0.8.33",
    "networkx>=3.2.1",
    "layoutparser>=0.3.4",
    "docling>=0.0.4",
    "gensim>=4.3.0",
    "nltk>=3.8.1",
    "pysbd>=0.3.4",
    "scikit-learn>=1.4.1.post1",
    "spacy>=3.7.2",
]
reranking = [
    "xgboost>=1.7.6",
]

[project.entry-points."medical_kg.adapters"]
example = "Medical_KG_rev.adapters.plugins.example:ExampleAdapterPlugin"

[project.urls]
Homepage = "https://github.com/your-org/Medical_KG_rev"
Documentation = "https://your-org.github.io/Medical_KG_rev"
Repository = "https://github.com/your-org/Medical_KG_rev"
Issues = "https://github.com/your-org/Medical_KG_rev/issues"

[project.scripts]
medkg = "Medical_KG_rev.cli:main"
medkg-gateway = "Medical_KG_rev.gateway.main:main"

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"Medical_KG_rev.kg" = ["*.ttl"]

[tool.black]
line-length = 100
target-version = ["py312"]
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py312"
extend-select = [
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "RUF",  # ruff-specific
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "PTH",  # flake8-use-pathlib
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
]
ignore = [
    "E501",    # Line too long (handled by black)
    "TID252",  # Allow relative imports within package
    "N999",    # Allow capitalized top-level package name
]

[tool.ruff.isort]
known-first-party = ["Medical_KG_rev"]

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pyalex.*",
    "neo4j.*",
    "opensearch.*",
    "faiss.*",
    "minio.*",
    "zeep.*",
    "aiokafka.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=Medical_KG_rev",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
asyncio_mode = "auto"
markers = [
    "integration: Integration tests requiring external services",
    "gpu: Tests requiring GPU hardware",
    "slow: Slow-running tests",
    "contract: Contract tests against API specs",
    "performance: Performance and load tests",
]

[tool.coverage.run]
source = ["src/Medical_KG_rev"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
