syntax = "proto3";

package medical_kg_rev.gpu;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

// GPU Service Definition
service GPUService {
    // Get GPU status and availability
    rpc GetStatus(StatusRequest) returns (StatusResponse);

    // List available GPU devices
    rpc ListDevices(ListDevicesRequest) returns (ListDevicesResponse);

    // Allocate GPU for processing
    rpc AllocateGPU(AllocateGPURequest) returns (AllocateGPUResponse);

    // Release GPU allocation
    rpc ReleaseGPU(ReleaseGPURequest) returns (ReleaseGPUResponse);

    // Health check endpoint
    rpc GetHealth(HealthRequest) returns (HealthResponse);

    // Get GPU statistics
    rpc GetStats(StatsRequest) returns (StatsResponse);
}

// Request to get GPU status
message StatusRequest {
    bool include_detailed_info = 1;
}

// Response with GPU status
message StatusResponse {
    bool gpu_available = 1;
    int32 total_devices = 2;
    int32 available_devices = 3;
    repeated GPUDevice devices = 4;
    GPUStatus overall_status = 5;
    string error_message = 6;
}

// Request to list GPU devices
message ListDevicesRequest {
    bool include_usage_stats = 1;
}

// Response with GPU devices
message ListDevicesResponse {
    repeated GPUDevice devices = 1;
    int32 total_count = 2;
}

// Request to allocate GPU
message AllocateGPURequest {
    string allocation_id = 1;
    int32 requested_memory_mb = 2;
    string preferred_device_id = 3;
    int32 timeout_seconds = 4;
    map<string, string> metadata = 5;
}

// Response from GPU allocation
message AllocateGPUResponse {
    bool success = 1;
    string device_id = 2;
    int32 allocated_memory_mb = 3;
    string allocation_id = 4;
    google.protobuf.Timestamp allocated_at = 5;
    google.protobuf.Timestamp expires_at = 6;
    string error_message = 7;
}

// Request to release GPU
message ReleaseGPURequest {
    string allocation_id = 1;
    string device_id = 2;
}

// Response from GPU release
message ReleaseGPUResponse {
    bool success = 1;
    string message = 2;
    google.protobuf.Timestamp released_at = 3;
}

// GPU device information
message GPUDevice {
    string device_id = 1;
    string name = 2;
    string driver_version = 3;
    int32 total_memory_mb = 4;
    int32 available_memory_mb = 5;
    int32 used_memory_mb = 6;
    float utilization_percent = 7;
    float temperature_celsius = 8;
    GPUStatus status = 9;
    repeated GPUAllocation active_allocations = 10;
}

// GPU allocation information
message GPUAllocation {
    string allocation_id = 1;
    string device_id = 2;
    int32 allocated_memory_mb = 3;
    google.protobuf.Timestamp allocated_at = 4;
    google.protobuf.Timestamp expires_at = 5;
    map<string, string> metadata = 6;
}

// GPU status enumeration
enum GPUStatus {
    GPU_STATUS_UNSPECIFIED = 0;
    GPU_STATUS_AVAILABLE = 1;
    GPU_STATUS_IN_USE = 2;
    GPU_STATUS_ERROR = 3;
    GPU_STATUS_OFFLINE = 4;
    GPU_STATUS_MAINTENANCE = 5;
}

// Health check request
message HealthRequest {
    string service_name = 1;
}

// Health check response
message HealthResponse {
    string status = 1;
    string message = 2;
    google.protobuf.Timestamp timestamp = 3;
    ServiceInfo service_info = 4;
    ResourceUsage resource_usage = 5;
}

// Service information
message ServiceInfo {
    string version = 1;
    string build_date = 2;
    string git_commit = 3;
    repeated string capabilities = 4;
}

// Resource usage
message ResourceUsage {
    float cpu_usage_percent = 1;
    float memory_usage_mb = 2;
    float gpu_usage_percent = 3;
    float gpu_memory_usage_mb = 4;
    int32 active_allocations = 5;
}

// Statistics request
message StatsRequest {
    string metric_name = 1;
    google.protobuf.Timestamp start_time = 2;
    google.protobuf.Timestamp end_time = 3;
}

// Statistics response
message StatsResponse {
    repeated MetricValue metrics = 1;
    google.protobuf.Timestamp generated_at = 2;
}

// Metric value
message MetricValue {
    string metric_name = 1;
    double value = 2;
    string unit = 3;
    google.protobuf.Timestamp timestamp = 4;
    map<string, string> labels = 5;
}
